version: "3"
services:
  db:
    platform: linux/x86_64
    image: mysql:5.7
    ports:
      - "3003:3306"
    volumes:
      - ./server/db:/docker-entrypoint-initdb.d/:ro
    environment:
      MYSQL_ROOT_PASSWORD: root
  client:
    build: ./client
    links:
      - publisher
      - subscriber
    ports:
      - "8080:8080"
    volumes: ["./client:/src"]
    command: ["npm", "run", "serve"]
  publisher:
    build: ./server
    depends_on:
      - db
    ports:
      - "5000:5000"
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./app.py
    volumes: ["./server:/app"]
    restart: unless-stopped
    command: ["flask", "run", "--host=0.0.0.0"]
  broker1:
    build: ./broker
    depends_on:
      - db
    ports:
      - "5005:5005"
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./broker_app.py
    volumes: ["./broker:/broker"]
    restart: unless-stopped
    command: ["flask", "run", "--host=0.0.0.0", "--port=5005"]
  broker2:
    build: ./broker
    depends_on:
      - db
    ports:
      - "5006:5006"
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./broker_app.py
    volumes: ["./broker:/broker"]
    restart: unless-stopped
    command: ["flask", "run", "--host=0.0.0.0", "--port=5006"]
  broker3:
    build: ./broker
    depends_on:
      - db
    ports:
      - "5007:5007"
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./broker_app.py
    volumes: ["./broker:/broker"]
    restart: unless-stopped
    command: ["flask", "run", "--host=0.0.0.0", "--port=5007"]
  broker4:
    build: ./broker
    depends_on:
      - db
    ports:
      - "5008:5008"
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./broker_app.py
    volumes: ["./broker:/broker"]
    restart: unless-stopped
    command: ["flask", "run", "--host=0.0.0.0", "--port=5008"]
  subscriber:
    build: ./subscriber
    depends_on:
      - db
    ports:
      - "5002:5002"
    environment:
      FLASK_DEBUG: 1
      FLASK_APP: ./sub_app.py
    volumes: ["./subscriber:/subscriber"]
    restart: unless-stopped
    command: ["flask", "run", "--host=0.0.0.0", "--port=5002"]

  zookeeper-1:
    container_name: zookeeper-1
    image: aimvector/zookeeper:2.7.0
    build:
      context: ./kafka/zookeeper
    volumes:
    - ./config/zookeeper-1/zookeeper.properties:/kafka/config/zookeeper.properties
    - ./data/zookeeper-1/:/tmp/zookeeper/
    networks:
    - kafka
  kafka-1:
    container_name: kafka-1
    image: aimvector/kafka:2.7.0
    build: 
      context: .
    volumes:
    - ./config/kafka-1/server.properties:/kafka/config/server.properties
    - ./data/kafka-1/:/tmp/kafka-logs/
    networks:
    - kafka
  kafka-2:
    container_name: kafka-2
    image: aimvector/kafka:2.7.0
    build: 
      context: .
    volumes:
    - ./config/kafka-2/server.properties:/kafka/config/server.properties
    - ./data/kafka-2/:/tmp/kafka-logs/
    networks:
    - kafka
  kafka-3:
    container_name: kafka-3
    image: aimvector/kafka:2.7.0
    build: 
      context: .
    volumes:
    - ./config/kafka-3/server.properties:/kafka/config/server.properties
    - ./data/kafka-3/:/tmp/kafka-logs/
    networks:
    - kafka
  kafka-producer:
    container_name: kafka-producer
    image: aimvector/kafka:2.7.0
    build: 
      context: .
    working_dir: /kafka
    entrypoint: /bin/bash
    stdin_open: true
    tty: true
    networks:
    - kafka
  kafka-consumer:
    container_name: kafka-consumer
    image: aimvector/kafka:2.7.0
    build: 
      context: .
    working_dir: /kafka
    entrypoint: /bin/bashdocker build . -t aimvector/kafka:2.7.0
    stdin_open: true
    tty: true
    networks:
    - kafka

networks: 
  kafka:
    name: kafka
